# app.py
import streamlit as st
import requests
import json
import logging
import random
import yaml
import os
import sqlite3
import datetime
from enum import Enum
from typing import Dict, List, Optional, Any
from pathlib import Path
from manga_ocr import MangaOcr
from PIL import Image
import io
import streamlit.components.v1 as components
from flask import Flask, jsonify
import threading
import numpy as np
from streamlit_drawable_canvas import st_canvas

# Setup paths
BASE_DIR = Path(__file__).parent.absolute()
ROOT_DIR = BASE_DIR.parent
DATA_DIR = ROOT_DIR / "data"
CACHE_DIR = DATA_DIR / "cache"

# Create directories if they don't exist
DATA_DIR.mkdir(exist_ok=True, parents=True)
CACHE_DIR.mkdir(exist_ok=True, parents=True)

# Database path
DB_PATH = DATA_DIR / "db.sqlite3"

# Setup logging
LOG_FILE = BASE_DIR / "app.log"
logging.basicConfig(
    level=logging.DEBUG,  # Changed to DEBUG level
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()  # Added console handler
    ],
)
logger = logging.getLogger('writing_practice')

# Enable debug mode in config
DEBUG = os.environ.get('STREAMLIT_DEBUG', 'false').lower() == 'true'

# State Management
class AppState(Enum):
    SETUP = "setup"
    PRACTICE = "practice"
    REVIEW = "review"

class WritingPracticeApp:
    def __init__(self):
        logger.info("Initializing Writing Practice App...")
        self.initialize_session_state()
        self.load_prompts()
        self.initialize_database()
        self.load_vocabulary_groups()
        self.mocr = None  # Initialize MangaOCR on demand

        # Start the API server only if it's not already running
        try:
            response = requests.get("http://localhost:5000/api/groups/1/raw")
            if response.status_code != 200:
                self.start_api_server()
        except requests.exceptions.ConnectionError:
            self.start_api_server()

    def start_api_server(self):
        """Start the API server on port 5000"""
        app = Flask(__name__)

        @app.route('/api/groups/<int:group_id>/raw')
        def get_group_words(group_id):
            try:
                # Create a new connection for this request
                with sqlite3.connect(DB_PATH) as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT id, kanji, romaji, english FROM words WHERE group_id = ?",
                        (group_id,)
                    )
                    columns = [col[0] for col in cursor.description]
                    words = [dict(zip(columns, row)) for row in cursor.fetchall()]
                return jsonify(words)
            except Exception as e:
                logger.error(f"API error: {e}")
                return jsonify({"error": str(e)}), 500

        def run_flask():
            try:
                app.run(port=5000)
            except OSError as e:
                logger.warning(f"Could not start API server: {e}")

        # Start Flask in a separate thread
        threading.Thread(target=run_flask, daemon=True).start()
        logger.info("API server started on port 5000")

    def initialize_session_state(self):
        """Initialize or get session state variables"""
        initial_states = {
            'app_state': AppState.SETUP,
            'current_sentence': "",
            'current_english': "",
            'review_data': None,
            'current_group_id': None,
            'current_word': None,
            'vocabulary': [],
            'debug_mode': DEBUG,
            'last_action': None,
            'error_log': []
        }
        
        for key, default_value in initial_states.items():
            if key not in st.session_state:
                st.session_state[key] = default_value
                logger.debug(f"Initialized session state: {key} = {default_value}")
            
        # Log current state
        logger.debug(f"Current app state: {st.session_state.app_state}")
        logger.debug(f"Session state keys: {list(st.session_state.keys())}")

    def load_prompts(self):
        """Load prompts from YAML file"""
        prompts_file = BASE_DIR / "prompts.yaml"
        try:
            if prompts_file.exists():
                with open(prompts_file, 'r') as file:
                    self.prompts = yaml.safe_load(file)
                logger.info("Prompts loaded successfully")
            else:
                logger.warning("Prompts file not found, using defaults")
                self.prompts = {
                    "sentence_generation": {
                        "system": "You are a Japanese language teacher...",
                        "user": "Generate a simple sentence using..."
                    }
                }
        except Exception as e:
            logger.error(f"Error loading prompts: {e}")
            self.prompts = {}

    def initialize_database(self):
        """Initialize database connection"""
        try:
            # Use check_same_thread=False to allow connection sharing
            self.conn = sqlite3.connect(DB_PATH, check_same_thread=False)
            self.cursor = self.conn.cursor()
            logger.info("Database connection established")

            # Check if database is empty (word_groups table)
            self.cursor.execute("SELECT COUNT(*) FROM word_groups")
            if self.cursor.fetchone()[0] == 0:
                self.load_sample_data()

        except sqlite3.Error as e:
            logger.error(f"Database connection failed: {e}")
            st.error("Failed to connect to database")

    def load_sample_data(self):
        """Load sample data if database is empty"""
        try:
            logger.info("Loading sample data...")

            # Insert sample group
            self.cursor.execute(
                "INSERT INTO word_groups (name, level) VALUES (?, ?)",
                ("Basic Starter Words", "N5")
            )

            # Insert sample words
            sample_words = [
                ("こんにちは", "konnichiwa", "Hello", 1),
                ("ありがとう", "arigatou", "Thank you", 1),
                ("さようなら", "sayounara", "Goodbye", 1)
            ]
            self.cursor.executemany(
                "INSERT INTO words (kanji, romaji, english, group_id) VALUES (?, ?, ?, ?)",
                sample_words
            )

            self.conn.commit()
            logger.info("Sample data loaded successfully")

        except sqlite3.Error as e:
            logger.error(f"Failed to load sample data: {e}")
            st.error("Failed to initialize sample data")

    def load_vocabulary_groups(self):
        """Load vocabulary groups from database"""
        try:
            self.vocabulary_groups = self.execute_query(
                "SELECT id, name, level FROM word_groups ORDER BY level"
            )
            logger.info(f"Loaded {len(self.vocabulary_groups)} vocabulary groups")
            return True
        except Exception as e:
            logger.error(f"Error loading vocabulary groups: {e}")
            return False

    def execute_query(self, query, params=()):
        """Execute a database query"""
        try:
            self.cursor.execute(query, params)
            if query.strip().upper().startswith("SELECT"):
                columns = [col[0] for col in self.cursor.description]
                return [dict(zip(columns, row)) for row in self.cursor.fetchall()]
            self.conn.commit()
            return True
        except sqlite3.Error as e:
            logger.error(f"Database error: {e}")
            return False

    def fetch_vocabulary_for_group(self, group_id):
        """Fetch vocabulary for a specific group"""
        try:
            st.session_state.vocabulary = self.execute_query(
                "SELECT id, kanji, romaji, english FROM words WHERE group_id = ?",
                (group_id,)
            )
            logger.info(f"Loaded {len(st.session_state.vocabulary)} vocabulary items")
        except Exception as e:
            logger.error(f"Error fetching vocabulary: {e}")
            st.error("Failed to load vocabulary")

    def set_background(self, image_path):
        """Set the background image for the app"""
        st.markdown(
            f"""
            <style>
            .stApp {{
                background-image: url("{image_path}");
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
            }}
            .stApp > header {{
                background-color: transparent;
            }}
            </style>
            """,
            unsafe_allow_html=True,
        )

    def render_setup_state(self):
        """Render the setup state UI"""
        # self.set_background("assets/images/setup_background.jpg")  # Uncomment or adjust if you have an image
        st.title("Japanese Writing Practice")
        st.write("Welcome to the Japanese Writing Practice app. Select a category to begin.")

        # Load vocabulary groups if not already loaded
        if not hasattr(self, 'vocabulary_groups') or not self.vocabulary_groups:
            groups_loaded = self.load_vocabulary_groups()
            if not groups_loaded:
                st.warning("Could not load vocabulary categories. Please ensure the main system setup has been completed.")
                return

        # Create columns for buttons
        cols = st.columns(3)

        if self.vocabulary_groups and len(self.vocabulary_groups) > 0:
            for idx, group in enumerate(self.vocabulary_groups):
                col_idx = idx % 3
                with cols[col_idx]:
                    # Determine if this button is selected
                    is_selected = st.session_state.get('current_group_id') == group['id']

                    button_style = f"""
                    <style>
                    div[data-testid="stButton"] button[data-testid="baseButton-secondary"] {{
                        background-color: {'#1f77b4' if is_selected else 'white'} !important;
                        color: {'white' if is_selected else 'black'} !important;
                        border: 2px solid #1f77b4 !important;
                        margin: 5px 0 !important;
                        min-height: 60px !important;
                    }}
                    </style>
                    """
                    st.markdown(button_style, unsafe_allow_html=True)

                    if st.button(
                        f"{group['name']}\n({group.get('level', 'N/A')})",
                        key=f"group_{group['id']}",
                        use_container_width=True,
                    ):
                        st.session_state['current_group_id'] = group['id']
                        self.fetch_vocabulary_for_group(group['id'])
        else:
            st.info("No vocabulary categories found. The system may still be initializing.")
            return

        # Display current category info and generate button
        if st.session_state.get('current_group_id'):
            st.markdown("---")
            selected_name = next(
                (g['name'] for g in self.vocabulary_groups if g['id'] == st.session_state.current_group_id),
                ''
            )
            st.info(f"Selected: {selected_name}")

            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.markdown(
                    """
                    <style>
                    div[data-testid="stButton"] button#generate-btn {
                        background-color: #00cc00 !important;
                        color: white !important;
                        border: none !important;
                        font-weight: bold !important;
                        padding: 20px !important;
                        font-size: 20px !important;
                        width: 100% !important;
                        margin: 20px 0 !important;
                        border-radius: 10px !important;
                    }
                    </style>
                    """,
                    unsafe_allow_html=True
                )

                if st.button("Generate Practice Sentence", key="generate-btn"):
                    with st.spinner("Generating sentence..."):
                        try:
                            sentence_data = self.generate_sentence()
                            if sentence_data:
                                self.cache_sentence(sentence_data)
                                st.session_state['current_sentence'] = sentence_data
                                st.session_state['current_english'] = sentence_data.get('english', '')
                                # Transition to PRACTICE state, crucial fix:
                                st.session_state['app_state'] = AppState.PRACTICE
                                st.rerun()
                        except Exception as e:
                            logger.error(f"Error generating sentence: {e}")
                            st.error("Failed to generate sentence. Please try again.")

    def generate_sentence(self):
        """Generate a simple JLPT N5 level sentence using the Ollama LLM"""
        if not hasattr(self, 'prompts') or 'sentence_generation' not in self.prompts:
            logger.error("Sentence generation prompts not loaded")
            return None

        current_group = next(
            (g for g in self.vocabulary_groups if g['id'] == st.session_state.current_group_id),
            None
        )
        if not current_group:
            logger.error("No current group selected")
            return None

        system_prompt = self.prompts['sentence_generation']['system']
        user_prompt = self.prompts['sentence_generation']['user'].format(
            category=current_group['name']
        )

        try:
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={
                    "model": "llama3.2",
                    "prompt": f"{system_prompt}\n\n{user_prompt}",
                    "stream": False,
                    "max_tokens": 50
                },
                timeout=10
            )
            response.raise_for_status()
            generated_text = response.json()['response']

            # Extract Japanese sentence and English translation
            lines = generated_text.split('\n')
            japanese_sentence = lines[0].strip() if len(lines) > 0 else ""
            english_translation = lines[1].strip() if len(lines) > 1 else ""

            return {
                "japanese": japanese_sentence,
                "english": english_translation,
                "level": current_group['level'],
                "category": current_group['name']
            }
        except requests.RequestException as e:
            logger.error(f"Failed to generate sentence: {e}")
            return None

    def cache_sentence(self, sentence_data):
        """Cache the generated sentence in the database"""
        try:
            self.execute_query(
                "INSERT INTO sentences (japanese, english, level, category) VALUES (?, ?, ?, ?)",
                (
                    sentence_data['japanese'],
                    sentence_data['english'],
                    sentence_data['level'],
                    sentence_data['category']
                )
            )
            logger.info(f"Cached sentence: {sentence_data['japanese']}")
        except sqlite3.Error as e:
            logger.error(f"Failed to cache sentence: {e}")

    def recognize_text(self, image):
        """Recognize text from an image using Manga OCR"""
        if self.mocr is None:
            self.mocr = MangaOcr()
        return self.mocr(image)

    def grade_submission(self, submitted_text, correct_text):
        """Grade the submitted text against the correct text"""
        if submitted_text.strip() == correct_text.strip():
            grade = 'S'
        elif submitted_text.strip() in correct_text.strip():
            grade = 'A'
        elif correct_text.strip() in submitted_text.strip():
            grade = 'B'
        else:
            grade = 'C'

        return {
            'grade': grade,
            'submitted_text': submitted_text,
            'correct_text': correct_text,
            'feedback': self.generate_feedback(submitted_text, correct_text, grade)
        }

    def generate_feedback(self, submitted_text, correct_text, grade):
        """Generate feedback based on the submission"""
        if grade == 'S':
            return "Perfect! Your writing matches exactly!"
        elif grade == 'A':
            return "Very good! Your writing is mostly correct."
        elif grade == 'B':
            return "Good attempt! Keep practicing to improve accuracy."
        else:
            return "Keep practicing! Focus on stroke order and character formation."

    def process_submission(self, recognized_text):
        """Process the submission and move to review state"""
        if st.session_state.get('current_sentence'):
            correct_text = st.session_state['current_sentence']['japanese']
            review_data = self.grade_submission(recognized_text, correct_text)
            st.session_state['review_data'] = review_data
            st.session_state['app_state'] = AppState.REVIEW
            st.rerun()

    def render_practice_state(self):
        """Render the practice state UI"""
        st.title("Japanese Writing Practice")

        # If for some reason there's no sentence, show a warning
        if not st.session_state.get('current_sentence'):
            st.warning("No practice sentence is generated yet.")
            if st.button("Back to Categories"):
                st.session_state['app_state'] = AppState.SETUP
                st.rerun()
            return

        st.markdown(
            """
            <style>
            .sentence-box {
                padding: 20px;
                border-radius: 10px;
                background-color: #f0f2f6;
                margin: 20px 0;
            }
            </style>
            """,
            unsafe_allow_html=True,
        )

        st.markdown('<div class="sentence-box">', unsafe_allow_html=True)
        st.markdown("### Practice this sentence:")
        st.markdown(f"**Japanese:** {st.session_state['current_sentence']['japanese']}")
        st.markdown(f"**English:** {st.session_state['current_english']}")
        st.markdown('</div>', unsafe_allow_html=True)

        # Create tabs for different input methods
        tab1, tab2, tab3 = st.tabs(["Draw", "Webcam", "Upload"])

        with tab1:
            st.subheader("Draw your sentence:")
            canvas_result = st_canvas(
                fill_color="rgba(255, 255, 255, 0.0)",
                stroke_width=2,
                stroke_color='#0000',
                background_color="#eee",
                height=200,
                width=600,
                drawing_mode="freedraw",
                key="canvas",
            )

            if st.button("Submit Drawing", key="submit_drawing"):
                if canvas_result.image_data is not None:
                    img_data = canvas_result.image_data
                    img = Image.fromarray(np.uint8(img_data))
                    recognized_text = self.recognize_text(img)
                    st.write(f"Recognized text: {recognized_text}")

                    # Call the grading logic
                    if st.button("Grade Submission (Drawing)"):
                        self.process_submission(recognized_text)

        with tab2:
            st.subheader("Capture your written response:")
            picture = st.camera_input("Hold up your written response")
            if picture:
                image = Image.open(picture)
                st.image(image, caption="Captured Image", use_column_width=True)
                recognized_text = self.recognize_text(image)
                st.write(f"Recognized text: {recognized_text}")

                if st.button("Grade Submission (Camera)"):
                    self.process_submission(recognized_text)

        with tab3:
            st.subheader("Upload your written response:")
            uploaded_file = st.file_uploader("Choose an image file", type=['png', 'jpg', 'jpeg'])
            if uploaded_file is not None:
                image = Image.open(uploaded_file)
                st.image(image, caption="Uploaded Image", use_column_width=True)
                recognized_text = self.recognize_text(image)
                st.write(f"Recognized text: {recognized_text}")

                if st.button("Grade Submission (Upload)"):
                    self.process_submission(recognized_text)

        st.markdown("---")
        if st.button("Back to Categories", use_container_width=True):
            st.session_state['app_state'] = AppState.SETUP
            st.rerun()

    def render_review_state(self):
        """Render the review state UI"""
        st.title("Review Your Writing")

        if st.session_state.get('review_data'):
            review_data = st.session_state['review_data']

            grade_colors = {
                'S': '#FFD700',  # Gold
                'A': '#98FB98',  # Pale green
                'B': '#87CEEB',  # Sky blue
                'C': '#FFA07A'   # Light salmon
            }

            st.markdown(f"""
            <style>
            .grade-box {{
                padding: 20px;
                border-radius: 10px;
                background-color: {grade_colors[review_data['grade']]};
                text-align: center;
                margin: 20px 0;
            }}
            .comparison-box {{
                padding: 15px;
                border-radius: 5px;
                background-color: #f0f2f6;
                margin: 10px 0;
            }}
            </style>
            """, unsafe_allow_html=True)

            st.markdown(f"""
            <div class="grade-box">
            <h1>Grade: {review_data['grade']}</h1>
            </div>
            """, unsafe_allow_html=True)

            st.subheader("Comparison")
            col1, col2 = st.columns(2)

            with col1:
                st.markdown('<div class="comparison-box">', unsafe_allow_html=True)
                st.markdown("**Your Writing:**")
                st.markdown(f"{review_data['submitted_text']}")
                st.markdown('</div>', unsafe_allow_html=True)

            with col2:
                st.markdown('<div class="comparison-box">', unsafe_allow_html=True)
                st.markdown("**Correct Text:**")
                st.markdown(f"{review_data['correct_text']}")
                st.markdown('</div>', unsafe_allow_html=True)

            st.markdown("### Feedback")
            st.info(review_data['feedback'])

            col1, col2 = st.columns(2)
            with col1:
                if st.button("Try Again", use_container_width=True):
                    st.rerun()
            with col2:
                if st.button("New Sentence", use_container_width=True):
                    st.session_state['app_state'] = AppState.SETUP
                    st.rerun()
        else:
            st.warning("No review data found.")

    def run(self):
        """Main application runner"""
        try:
            # Debug section (can be toggled with ?debug=true in URL)
            if st.session_state.debug_mode:
                with st.expander("Debug Information", expanded=False):
                    st.write("### Session State")
                    st.json(dict(st.session_state))
                    
                    st.write("### Recent Actions")
                    if st.session_state.last_action:
                        st.write(st.session_state.last_action)
                    
                    st.write("### Error Log")
                    for error in st.session_state.error_log[-5:]:  # Show last 5 errors
                        st.error(error)
                    
                    if st.button("Clear Error Log"):
                        st.session_state.error_log = []
                        st.rerun()
                    
                    st.write("### Current Database Status")
                    try:
                        self.cursor.execute("SELECT COUNT(*) FROM word_groups")
                        groups_count = self.cursor.fetchone()[0]
                        self.cursor.execute("SELECT COUNT(*) FROM words")
                        words_count = self.cursor.fetchone()[0]
                        st.write(f"Word Groups: {groups_count}")
                        st.write(f"Total Words: {words_count}")
                    except Exception as e:
                        st.write("Could not fetch database stats:", str(e))

            # Log the current state before rendering
            logger.debug(f"Rendering state: {st.session_state.app_state}")
            
            if st.session_state.app_state == AppState.SETUP:
                self.render_setup_state()
            elif st.session_state.app_state == AppState.PRACTICE:
                self.render_practice_state()
            elif st.session_state.app_state == AppState.REVIEW:
                self.render_review_state()
                
        except Exception as e:
            error_msg = f"Application error: {str(e)}"
            logger.error(error_msg)
            st.session_state.error_log.append(error_msg)
            st.error("An unexpected error occurred. Please refresh the page.")


# Main entry point
if __name__ == "__main__":
    app = WritingPracticeApp()
    app.run()