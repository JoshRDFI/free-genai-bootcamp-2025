Free GenAI BootCamp 2025
JPLT Language Tutor Project

free-genai-bootcamp-2025/
├── database/
│   ├── __init__.py
│   ├── sqlite/
│   │   ├── __init__.py
│   │   ├── models.py        # Shared database models
│   │   ├── connection.py    # Connection management
│   │   └── migrations/      # Database migrations
│   ├── vector_store/
│   │   ├── __init__.py
│   │   ├── chroma_db.py     # ChromaDB implementation
│   │   └── embeddings.py    # Embedding utilities
│   └── utils/
│       ├── __init__.py
│       └── query_helpers.py # Common database operations
├── data/
│   ├── db.sqlite3           # Main SQLite database file
│   └── vector_indices/      # ChromaDB persistence directory
│   
├── listening-speaking/
│   ├── backend/
│   │   ├── __init__.py
│   │   ├── app.py                # Main backend entrypoint.
|   │   ├── data/
|   │   │   ├── questions/          # Stores question text files 
|   │   │   ├── transcripts/        # Stores transcript text files
|   │   │   ├── images/             # Stores generated images
|   │   │   ├── audio/              # Stores generated audio
│   │   │   └── stored_questions.json  # JSON list of questions that is added to with each transcription
│   │   ├── logs/
│   │   │   ├── question_generator.log
│   │   │   └── errors.json
│   │   ├── youtube/
│   │   │   ├── __init__.py
│   │   │   └── get_transcript.py # Handles YouTube transcript extraction.
│   │   ├── asr/
│   │   │   ├── __init__.py
│   │   │   └── asr_engine.py     # OpenWhisper-based ASR implementation.
│   │   ├── llm/
│   │   │   ├── __init__.py
│   │   │   ├── chat.py           # LLM chat interface (API at port 9000).
│   │   │   └── question_generator.py  # Generates listening comprehension questions.
│   │   ├── images/
│   │   │   ├── __init__.py
│   │   │   ├── image_generator.py    # Handles image generation
│   │   │   └── prompt_generator.py   # Creates image prompts from questions
│   │   ├── tts/
|   │   |   ├── XTTS/
|   │   |   ├── voices/
|   │   |   |   ├── male_voice.wav
|   │   |   |   └── female_voice.wav
│   │   │   ├── __init__.py
│   │   │   ├── audio_generator.py   # Generates audio using Coqui TTS.
│   │   │   ├── test_tts.py          # Tests to make sure Coqui TTS with XTTS is working.
│   │   │   └── tts_engine.py        # Wrapper for TTS engines.
│   │   ├── database/
|   │   |   ├── migrations/         # possibly unneeded
│   │   │   │   └── add_image_links.sql 
│   │   │   ├── __init__.py
│   │   │   └── knowledge_base.py    # SQLite3 integration for transcripts, questions, etc.
│   │   ├── agent/
│   │   │   ├── __init__.py
│   │   │   └── task_agent.py        # Coordinates ASR, transcript, LLM, and TTS tasks.
│   │   ├── guardrails/
│   │   │   ├── __init__.py
│   │   │   └── rules.py             # Guardrails for filtering inappropriate content.
│   │   └── utils/
│   │       ├── __init__.py
│   │       └── helper.py            # Common helper functions.
│   ├── run.py                       # run frontend.
│   └── README.md                    # Project overview and setup instructions.
│   
│   writing-practice/
│   ├── images/                     # Background images
│   │   ├── 1240417.png
|   │   ├── 1371442.png
|   │   └── 1371443.png
│   ├── app.log                     # log file
│   ├── app.py                      # Main application script
|   ├── prompts.yaml                # Prompt file for API access to the LLM
│   ├── Tech-specs.md               # Program specs
│   └── requirements.txt            # Add into main requirements
│   
│   opea-docker/
|   │   ├── mega-service/                # Setup and files for the mega service
|   │   │   ├── megaservice.py           # Main service orchestrator for the mega service
|   |   │   ├── file.txt
|   |   │   └── file.txt
│   |   ├── Dockerfile                   # Dockerfile.
│   |   ├── docker-compose.yml           # Coordinates LLM container and backend services.
│   |   ├── requirements.txt             # Python dependencies.
│   |   ├── app.py                       # Startup and connections
│   └── └── .env                         # environment files
│   
│   vocabulary_generator/
│   |   ├── config/
│   │   │   └── config.json
│   |   ├── data/
│   │   │   └── imports/
│   │   │   └── json_output/
│   |   ├── src/
│   |   |   ├── converter.py
│   |   |   ├── database.py
│   |   |   ├── generator.py
│   |   |   ├── sentence_gen.py
│   |   |   └── validator.py
│   |   ├── tests/
│   |   |   ├── test_database.py
│   |   |   ├── test_generator.py
│   |   |   └── test_validator.py
│   |   ├── main.py
│   |   ├── requirements.txt            # Combined into main requirements.txt file
│   └── └── readme.md                   # Description file
│   
│   lang-portal/
│   |   ├── backend/
│   |   |   ├── api/
│   |   │   │   └── main.py
│   |   |   ├── db/
│   |   |   |   ├── models.py
│   |   │   │   └── populate_db.py
│   │   │   └── prompt-backend.md
│   |   ├── frontend/
│   |   |   ├── src/
│   |   |   |   ├── components/
│   |   |   |   |   ├── Breadcrumbs.tsx
│   |   |   |   |   ├── Layout.tsx
│   |   |   |   |   ├── Navigation.tsx
│   |   |   |   |   ├── PaginationControls.tsx
│   |   |   |   |   ├── StudyActivityCard.tsx
│   |   |   |   |   └── WordsTable.tsx
│   |   |   |   ├── pages/
│   |   |   |   |   ├── Dashboard.tsx
|   │   |   |   |   ├── SessionShowPage.tsx
|   │   |   |   |   ├── SessionsPage.tsx
|   │   |   |   |   ├── StudyActivitiesPage.tsx
|   │   |   |   |   ├── StudyActivityShowPage.tsx
|   │   |   |   |   ├── WordGroupShowPage.tsx
|   │   |   |   |   ├── WordGroupsPage.tsx
|   │   |   |   |   ├── WordShowPage.tsx
|   │   |   |   |   ├── WordsIndex.tsx
|   │   |   |   |   └── WordsPage.py
|   │   |   |   ├── services/
|   │   |   |   |   └── api.ts
|   │   |   |   ├── types/
|   │   |   |   |   └── sessions.ts
|   │   |   |   ├── utils/
|   │   |   |   |   └── index.ts
|   │   ├── app.tsx
|   │   ├── langportal.db               # SQLite3 DB
|   │   ├── main.py
|   │   ├── schema.sql
|   │   ├── prompt-frontend.md          # Prompt used to generate much of this part of the program
└── └── └── readme.md                   # Description file

-------------------------
Updated Layout for opea

project-root/
├── app/
│   └── data/
│       ├── shared_db/              # Persistent storage for the SQLite database
│       ├── ollama_data/            # Persistent storage for Ollama server model files
│       ├── llm_xtts/               # Persistent storage for XTTS files used by llm_text
│       ├── tts_data/               # Persistent storage for XTTS files used by the tts service
│       ├── asr_data/               # Persistent storage for ASR’s downloaded model files
│       ├── mangaocr_models/        # Persistent storage for MangaOCR model files (used by llm-vision)
│       └── chroma_data/            # Persistent storage for ChromaDB’s vector stores and indices
└── opea-docker/
    └── comps/
        ├── llm_text/
        │   ├── Dockerfile
        │   ├── app.py
        │   └── requirements.txt
        ├── embeddings/
        │   ├── Dockerfile
        │   ├── app.py
        │   └── requirements.txt
        ├── llm-vision/
        │   ├── Dockerfile
        │   ├── app.py
        │   └── requirements.txt
        ├── tts/
        │   ├── Dockerfile
        │   ├── app.py
        │   └── requirements.txt
        ├── asr/
        │   ├── Dockerfile
        │   ├── app.py
        │   └── requirements.txt
        └── guardrails/
            ├── Dockerfile
            ├── app.py
            └── requirements.txt

docker-compose.yml