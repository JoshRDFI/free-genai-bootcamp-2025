# JLPT Listening Practice - Project Structure

This file details the organization and purpose of files within the listening-speaking project.

listening-speaking/
├── backend/
│   ├── __init__.py
│   ├── app.py                # Main backend entrypoint
│   ├── data/
│   │   ├── questions/        # Stores question text files 
│   │   ├── transcripts/      # Stores transcript text files
│   │   ├── images/          # Stores generated images
│   │   ├── audio/           # Stores generated audio
│   │   └── stored_questions.json  # JSON list of questions
│   ├── logs/
│   │   ├── question_generator.log
│   │   └── errors.json
│   ├── youtube/
│   │   ├── __init__.py
│   │   └── get_transcript.py # YouTube transcript extraction
│   ├── asr/
│   │   ├── __init__.py
│   │   └── asr_engine.py     # OpenWhisper ASR implementation
│   ├── llm/
│   │   ├── __init__.py
│   │   ├── chat.py           # LLM chat interface (port 9000)
│   │   └── question_generator.py  # Question generation
│   ├── images/
│   │   ├── __init__.py
│   │   ├── image_generator.py    # Image generation
│   │   └── prompt_generator.py   # Image prompt creation
│   ├── tts/
│   │   ├── XTTS/            # XTTS model files
│   │   ├── voices/          # Voice samples
│   │   │   ├── male_voice.wav
│   │   │   └── female_voice.wav
│   │   ├── __init__.py
│   │   ├── audio_generator.py   # Audio generation
│   │   ├── test_tts.py         # TTS testing
│   │   └── tts_engine.py        # TTS engine wrapper
│   ├── database/
│   │   ├── migrations/         # Database migrations
│   │   │   └── add_image_links.sql 
│   │   ├── __init__.py
│   │   └── knowledge_base.py    # SQLite3 integration
│   ├── agent/
│   │   ├── __init__.py
│   │   └── task_agent.py        # Task coordination
│   ├── guardrails/
│   │   ├── __init__.py
│   │   └── rules.py             # Content filtering
│   └── utils/
│       ├── __init__.py
│       └── helper.py            # Helper functions
├── frontend/
│   └── streamlit_app.py         # Streamlit frontend
├── run.py                       # Application launcher
├── requirements.txt             # Python dependencies
└── README.md                    # Project documentation

## Key Components

### Backend Services
- **app.py**: FastAPI backend server
- **youtube/**: YouTube transcript handling
- **asr/**: Speech recognition
- **llm/**: Question generation
- **tts/**: Text-to-speech
- **images/**: Image generation
- **database/**: Data storage
- **guardrails/**: Content filtering

### Frontend
- **streamlit_app.py**: Main user interface

### Launcher
- **run.py**: Manages application startup
  - `--setup`: Database initialization
  - `--backend`: Start backend server
  - `--frontend`: Start frontend

### Data Storage
- **data/**: Application data
  - questions/: Generated questions
  - transcripts/: Video transcripts
  - images/: Generated images
  - audio/: Generated audio
  - stored_questions.json: Question database

### Logs
- **logs/**: Application logs
  - question_generator.log: Question generation logs
  - errors.json: Error tracking