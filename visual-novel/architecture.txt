# Japanese Learning Visual Novel - Architectural Diagram

+-------------------------------------+
|                                     |
|  Visual Novel Frontend (Ren'Py)     |
|                                     |
+----------------+------------------+-+
                 |                  |
                 | HTTP/API         |
                 |                  |
+----------------v------------------+-+
|                                     |
|  Game Server / API Gateway          |
|                                     |
+-----+-------------+----------------+
      |             |                
      |             |                
+-----v-----+ +----v------+         
|           | |            |         
| Database  | | Docker     |         
| Service   | | Services   |         
|           | |            |         
+-----------+ +-----+------+         
                    |                
                    |                
      +-------------+---------------------------+
      |             |              |            |
+-----v-----+ +----v------+ +-----v-----+ +----v------+
|           | |            | |           | |            |
| LLM Text  | | TTS        | | ASR       | | Waifu      |
| Service   | | Service    | | Service   | | Diffusion  |
|           | |            | |           | |            |
+-----------+ +------------+ +-----------+ +------------+

## Component Descriptions:

1. **Visual Novel Frontend (Ren'Py)**
   - Web-exported Ren'Py game
   - Handles game logic, story progression, and UI
   - Communicates with backend services via API calls

2. **Game Server / API Gateway**
   - Coordinates communication between Ren'Py and services
   - Manages authentication and session state
   - Routes requests to appropriate services

3. **Database Service**
   - Stores player progress, vocabulary lists
   - Tracks learning metrics and achievements
   - Manages game state persistence

4. **Docker Services**
   - **LLM Text**: Generates dialogue, translations, and explanations for JLPT N5 content
   - **TTS**: Converts Japanese text to spoken audio using XTTS
   - **ASR**: Processes player's spoken Japanese for pronunciation practice
   - **Waifu Diffusion**: Generates anime-style images for backgrounds and characters

## Data Flow:

1. Player interacts with Ren'Py game interface
2. Game requests content (dialogue, translations, audio) from API Gateway
3. API Gateway routes requests to appropriate services
4. Services process requests and return results
5. Game updates UI with received content
6. Player progress is saved to database

## Integration Points:

1. **Ren'Py to API Gateway**: HTTP/REST API calls
2. **API Gateway to Services**: Internal network communication
3. **Services to Database**: Shared volume access